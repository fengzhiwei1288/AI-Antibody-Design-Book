5.1 Training Set的采集及处理：

1. 访问 SAbDab: The Structural Antibody Database，下载两个文件：
   - sabdab_summary_all.tsv（汇总数据）
   - 包含.pdb文件的压缩包（zip file）并将其保存到指定路径（例如：C:/Users/ZHF11/Downloads/pdbs）。

2. 打开 all_structures 目录中的 chothia 文件夹：
   - 你将看到大约8078个不同的PDB文件。

3. 安装 pdbget，并使用 pdbget 命令对8000多个PDB文件进行切割：
   - 关于脚本的详细解析，请参考GitHub文档。

4. 切割完成后，你将获得一个名为 split 的文件夹。
   - 在 split 文件夹内，每个PDB文件将以文件夹形式存在：
     - 文件夹名称与PDB文件名一致，且每个文件夹内的PDB文件已根据不同的链（chain）进行切割。

5. 在与 split 文件夹同一级目录下，打开 PowerShell，创建一个新的文件夹：
   - 输入命令：`mkdir hchains`。

6. 输入以下命令进行处理：

for i in $(cat /mnt/c/Users/ZHF11/Downloads/pdbs/sabdab_summary_all.tsv | awk '{printf "%s", $1 "," $2 "=" toupper($2) "_"; if ($2 == tolower($2)) { print "@" $2 } else { print $2 } }'|grep -v NA|sort|uniq|head -n-1); do pdb=${i%,*}; tmp=${i#*,}; chain=${tmp%=*}; tmp=${tmp#*=}; chainup=${tmp%_*}; chainat=${tmp#*_}; echo $pdb, $chain; source="split/$pdb/${chain}_AminoAcids.pdb"; source2="split/$pdb/${chainup}_AminoAcids.pdb"; source3="split/$pdb/${chainat}_AminoAcids.pdb"; target="hchains/${pdb}_${chain}.pdb"; if test -e $target; then echo "  - skipped"; continue; fi; cp $source $target || cp $source2 $target || cp $source3 $target; done

该命令的目的是遍历 sabdab_summary_all.tsv 文件中每一行，提取 pdb 和链的信息，然后根据链的信息尝试从不同的文件路径中复制相应的 .pdb 文件到目标文件夹中，目标文件的命名规则为 `pdb_链名.pdb`。如果目标文件已存在，则跳过该文件。

7. 同理，在与 split 文件夹同一级目录下，打开 PowerShell，创建一个新的文件夹：
   - 输入命令：`mkdir lchains`。

8. 去重：
   - 创建去重文件夹：`mkdir hchains_uniq`。

9. 输入以下命令：

cd hchains  # 进入 hchains 文件夹

for i in *.pdb; do  
    pdb=${i%_*}        # 提取文件名中 "_" 之前的部分，作为 pdb 的值
    chain=${i#*_}      # 提取文件名中 "_" 之后的部分，作为 chain 的值
    target=../hchains_uniq/$pdb.pdb  # 定义目标路径，将去重后的文件存储到 hchains_uniq 文件夹中

    echo $i  # 输出当前处理的文件名

    if test -e $target; then  # 检查目标文件是否已经存在
        echo "  -skipped"  # 如果目标文件已存在，跳过并提示
        continue            # 跳过当前循环，处理下一个文件
    fi

    cp $i $target  # 如果目标文件不存在，则将当前文件复制到目标路径
done

10. 创建去重文件夹：`mkdir lchains_uniq`。

11. 输入以下命令：

cd lchains

for i in *.pdb; do 
    pdb=${i%_*}
    chain=${i#*_}
    target=../lchains_uniq/$pdb.pdb
    echo $i

    if test -e $target; then 
        echo "  -skipped"
        continue
    fi

    cp $i $target
done

12. 统一修改Chain的信息：
   - 切换到 hchains_uniq 目录：

cd hchains_uniq

for i in *.pdb; do 
    target=../hchains_uniq_redacted/$i
    sed 's/^\(.....................\)./\1A/g' $i > $target
    head $target -n1
done

13. 切换到 lchains_uniq 目录：

cd lchains_uniq

for i in *.pdb; do 
    target=../lchains_uniq_redacted/$i
    sed 's/^\(.....................\)./\1B/g' $i > $target
    head $target -n1
done

5.2 训练集（Training Set） 从.pdb 到.pt格式转换的处理过程

1. 下载 maxit：
   - 网址：MAXIT下载。
   - 点击 download source，或直接输入以下网址：MAXIT源文件。

2. 压缩文件保存路径与前面 split 目录一致：maxit-v11.100-prod-src.tar.gz（此处应与前面下载的抗体数据存放在同一目录）。

3. 打开 Linux Shell，并执行以下命令：

# 切换到目录 /mnt/c/Users/ZHF11/Downloads/pdbs
zhf11@zhiwei-pogo:/mnt/c/Users/ZHF11/Downloads/pdbs$ 

4. 使用 zcat 解压压缩文件：

zcat maxit-v11.100-prod-src.tar.gz | tar -xf

5. 切换到 maxit-v11.100-prod-src 目录：

cd maxit-v11.100-prod-src

6. 执行 make binary：

make binary

7. 设置 RCSBROOT 环境变量：

RCSBROOT=/mnt/c/Users/ZHF11/Downloads/pdbs/maxit-v11.100-prod-src
export RCSBROOT
PATH="$RCSBROOT/bin:"$PATH
export PATH

8. 测试 maxit 是否安装成功并能运行：

maxit  # 测试你的maxit是否安装成功并能运行

9. 返回到上一级目录并列出文件：

cd ..
ls

10. 输入以下命令：（ConvertToCif.sh脚本可以查看本书籍的代码及详细解析）

./ConvertToCif.sh

11. 使用以下命令将 .cif 文件转换为 .cif.gz 格式 （假设现在的cif实在目录“Aug12_Converted_CIF”下），分别输入以下命令：

cd Aug12_Converted_CIF
for file in *.cif; do gzip -c "$file" > "../Compressed_CIF_Nov25/${file}.gz"; done

12. 克隆 GitHub 上的 pdbx 项目到本地

git clone https://github.com/soedinglab/pdbx

13.安装 CMake 工具：（如果已经安装，则跳到第14步）

sudo apt-get install cmake

14. 安装pdbx：

cd pdbx
mkdir build
cd build
make install

15. 使用 bash 脚本转化为.pt文件 
（假设这些文件存放在 Compressed_CIF_Nov25 文件夹中，同时将脚本 multiple_convert_gz_to_pt.sh 和 parse_cif_noX_change.py 拷贝至该文件夹）

./multiple_convert_gz_to_pt.sh

5.3 Training Data的构建

克隆 ProteinMPNN 的代码库到本地目录。在 training 目录下创建一个名为 pdb 的文件夹，并在其中新建一个名为 pt 的子文件夹。然后，将前面步骤中转换生成的 .pt 文件全部拷贝到该 pt 文件夹中

5.4 Antibody数据集的Training策略及步骤

1. 在 training 目录下，需要创建一个 .csv 文件和两个 .txt 文件，用于不同的数据处理需求。具体操作请查看本书的内容。

5.5 Parameters的调整（具体操作请查看本书的内容）


